Карта памяти уже обсуждалась мной ранее, я лишь напомню ее области:
[Режим 0: MX RAM (запись в FFFCH)]
0000H - FFDFH = Основное ОЗУ.
FFE0H - FFFFH = Порты ввода-вывода

[Режим 1: MX EXT RAM (запись в FFFDH)]
0000H - FFBFH = Дополнительное ОЗУ
FFC0H - FFDFH = Основное ОЗУ (шлюз)
FFE0H - FFFFH = Порты ввода-вывода

[Режим 2: MX ROM (запись в FFFEH)]
0000H - 7FFFH = ПЗУ МХа, включая систему в первых 16КБ
8000H - FFDFH = Основное ОЗУ
FFE0H - FFFFH = Порты ввода-вывода

[Режим 3: STD (запись в FFFFH или по сбросу)]
0000H - 7FFFH = ПЗУ (секция STD) или основное ОЗУ, управление: FFFAH
8000H - EFFFH = Основное ОЗУ
F000H - FFFFH = Порты ввода-вывода, причем в области F800H-FFFFH
блокируется на ППА клавиатуры

Теперь о страницах ПЗУ и доп. ОЗУ. Я тоже много думал - они не нужны. У нас есть
карта памяти. И быстрая загрузка/выгрузка с/на нее. Это упрощает шлюз (который
так и сделан у RAMFOS'а): вне зависимости от значения [A] они пишут в нужную
ячейку порта для переключения режима, поэтому сам шлюз получается предельно простым:

READ:	STA 0FFFDH
	MOV  A,M
	STA 0FFFCH
	RET
WRITE:	STA 0FFFDH
	MOV  M,A
	STA 0FFFCH
	RET

Вполне умещаемся в 32 байта. И вообще, в силу определенных обстоятельств, я предлагаю
вторую страницу ОЗУ использовать только под данные. Например, программа работает
в основном ОЗУ, а дополнительное - чисто ее данные (текст, для текстового реактора
и т.д.). Или "кармана" для программ, работающих с данными в основном ОЗУ. Так что,
страницы не нужны. Окончательное решение. 


0) KEY (FFE0...FFE3)
1) PROG (FFE4...FFE7)
2) x (FFE8...FFEB?)
3) TIMER (FFEC...FFEF?)
4) CARD (FFF0..FFF3?)
5) x (FFF4..FFF7?)
6) COL (FFF8..FFFB?)
7) MOD (FFFC..FFFF?)

IOP+4 его адрес. В МХе FFE4H-FFE7H, в стандарте F7E4H-F7E7H (технически, порты
повторяются с F700H по F7FFH с шагом в 32 байта, но ради совместимости, давайте
использовать адреса F7E0H-F7FFH в стандарте).